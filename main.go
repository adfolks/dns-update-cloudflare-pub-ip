package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"github.com/joho/godotenv"
	"os"
	"time"
)

//Payload defines the json request object
type Payload struct {
	Type    string `json:"type"`
	Name    string `json:"name"`
	Content string `json:"content"`
	TTL     int    `json:"ttl"`
	Proxied bool   `json:"proxied"`
}

//IpAPI defines the json response object for Origin IP api
type IpAPI struct {
	Origin string `json:"origin"`
}

type AutoGenerated struct {
	Result     []Result      `json:"result"`
	Success    bool          `json:"success"`
	Errors     []interface{} `json:"errors"`
	Messages   []interface{} `json:"messages"`
	ResultInfo ResultInfo    `json:"result_info"`
}
type Meta struct {
	AutoAdded           bool   `json:"auto_added"`
	ManagedByApps       bool   `json:"managed_by_apps"`
	ManagedByArgoTunnel bool   `json:"managed_by_argo_tunnel"`
	Source              string `json:"source"`
}
type Result struct {
	ID         string    `json:"id"`
	ZoneID     string    `json:"zone_id"`
	ZoneName   string    `json:"zone_name"`
	Name       string    `json:"name"`
	Type       string    `json:"type"`
	Content    string    `json:"content"`
	Proxiable  bool      `json:"proxiable"`
	Proxied    bool      `json:"proxied"`
	TTL        int       `json:"ttl"`
	Locked     bool      `json:"locked"`
	Meta       Meta      `json:"meta"`
	CreatedOn  time.Time `json:"created_on"`
	ModifiedOn time.Time `json:"modified_on"`
}
type ResultInfo struct {
	Page       int `json:"page"`
	PerPage    int `json:"per_page"`
	Count      int `json:"count"`
	TotalCount int `json:"total_count"`
	TotalPages int `json:"total_pages"` 
}


func main() {

	fmt.Println("Starting CloudFlare ip update service")
	var err error
	
	err = godotenv.Load()  // Loads environment values from .env file
		if err != nil {
					fmt.Printf("Error getting env, not comming through %v\n", err)
				} else {
						fmt.Print("Getting the env values\n")
				}

		
		DNS_one := os.Getenv("DNS_NAME_ONE") 		// Gets dns names from env file.
		DNS_two := os.Getenv("DNS_NAME_TWO")

		
		Record_id_one := getRecordId(DNS_one)		// Gets record_id for the dns name.
		Record_id_two := getRecordId(DNS_two)  

		content_ip := getMyIP() 				    // Gets the current ip of the server.

	
	  	 // Updating DNS one .
		url := "https://api.cloudflare.com/client/v4/zones/"+os.Getenv("ZONE_ID")+"/dns_records/"+Record_id_one 		
	
		payLoadone := Payload{
			Type:    "A",
			Name:    os.Getenv("DNS_NAME_ONE"),
			Content: content_ip,
			TTL:     120,
			Proxied: false,
		}
		updateCloudflareRecord(payLoadone, url)    // Function to update cloudflare

		// Updating DNS two 
		url = "https://api.cloudflare.com/client/v4/zones/"+os.Getenv("ZONE_ID")+"/dns_records/"+Record_id_two 
		payLoadtwo := Payload{
			Type:    "A",
			Name:    os.Getenv("DNS_NAME_TWO"),
			Content: content_ip,
			TTL:     120,
			Proxied: false,
		}
		updateCloudflareRecord(payLoadtwo, url)
	
}



// Funtion returns current ip address of the server.( This system)
func getMyIP () string {

	response, _ := http.Get("https://httpbin.org/ip")
	var responseIPJson IpAPI
	defer response.Body.Close()
	body, err := ioutil.ReadAll(response.Body)
	if err != nil {
		print("Error parsing response from service")
	} else {
		json.Unmarshal(body, &responseIPJson)
	}
	content_ip := responseIPJson.Origin 
	return content_ip
}

// Function updates the cloudflare
func updateCloudflareRecord(payload Payload, url string) {
	jsonPayload, _ := json.Marshal(payload)
	apiKey := os.Getenv("API_KEY")
	req, err := http.NewRequest("PUT", url, bytes.NewBuffer(jsonPayload))
	req.Header.Add("Authorization", "Bearer "+apiKey)
	req.Header.Add("Content-Type", "application/json")
	res, err := http.DefaultClient.Do(req)
	if err != nil {
		fmt.Print("something wrong while sending req " + err.Error())
	} else {
		res, _ := ioutil.ReadAll(res.Body)
		print(string(res))
		fmt.Println("")
	}

}


func getRecordId( DNS_name string ) string {

	req,err := http.NewRequest("GET","https://api.cloudflare.com/client/v4/zones/"+os.Getenv("ZONE_ID")+"/dns_records",nil)

	req.Header.Add("X-Auth-Key",os.Getenv("X-Auth-Key"))
	req.Header.Add("X-Auth-Email",os.Getenv("EMAIL") )
	
	res, err := http.DefaultClient.Do(req)
	 var Record_ID string
	
	if err != nil {
		fmt.Print("something wrong while sending req " + err.Error())
		
		} else {
		 res, _ := ioutil.ReadAll(res.Body)

		 var value  AutoGenerated

		 if err == nil && res != nil {
			err = json.Unmarshal([]byte(res), &value)
		}


		for l := range value.Result {
			if (DNS_name == value.Result[l].Name ){
				fmt.Printf( value.Result[l].Name)
				fmt.Println()
				Record_ID = value.Result[l].ID
				fmt.Println()
				
			}
		}
	
	}
	return Record_ID
}
