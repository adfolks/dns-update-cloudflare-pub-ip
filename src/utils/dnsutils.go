package utils


import (
	"bytes"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"os"
	"strings"

	"github.com/adfolks/dns-update-cloudflare-pub-ip/src/models"

	log "github.com/sirupsen/logrus" 
)

var Dns_names []string

var Record_ids = make([]string,0) 
var Content_ip string 

// The function updates all the dns .
// Calls update cloudflare function passing payload and record_id.
// Repeats the function call for each of the dns_name.

func GetDnsnames() []string{

	str := os.Getenv("DNS_NAMES")
	res1 := strings.Split(str, ",") 
	return res1
}

// Funtion returns current ip address of the server.( This system)
func GetMyIP () string {

	response, _ := http.Get("https://httpbin.org/ip")
	var responseIPJson models.IpAPI
	defer response.Body.Close()

	body, err := ioutil.ReadAll(response.Body)
	if err != nil {
			print("Error parsing response from service")
		} else {
			json.Unmarshal(body, &responseIPJson)
		}
	content_ip := responseIPJson.Origin 
	return content_ip
}

// The function gets all the record_id and unmarshlled to 'value' variable.
// Value is parsed each time comparing each of the dns_names. The corresponding record_id is fetched and appended to array.
// An array containing all the record_ids is returned.
func GetRecordId( DNS_nameslist []string ) []string {

	ListDns_names:= DNS_nameslist // Holds the dns_names array .

	req,err := http.NewRequest("GET","https://api.cloudflare.com/client/v4/zones/"+os.Getenv("ZONE_ID")+"/dns_records",nil)

	req.Header.Add("Authorization", "Bearer "+os.Getenv("API_KEY"))
	res, err := http.DefaultClient.Do(req)

	if err != nil {
		fmt.Print("something wrong while sending req " + err.Error())
		} else {
			res, _ := ioutil.ReadAll(res.Body)

			var value models.AutoGenerated // ' value' will hold the unmarshalled response json.

		if err == nil && res != nil {
					err = json.Unmarshal([]byte(res), &value)
				}

	for b := range ListDns_names{
		for l := range value.Result {
				if (ListDns_names[b] == value.Result[l].Name ){
				//fmt.Printf( value.Result[l].Name)
				//fmt.Println()
				//Record_ID = value.Result[l].ID
				//fmt.Println()
				r := value.Result[l].ID
				Record_ids = append(Record_ids , r)
				}
		}
	}

}
return Record_ids
}

// Function updates the cloudflare
func UpdateCloudflareRecord(payload models.Payload, record_id string) {

	url := "https://api.cloudflare.com/client/v4/zones/"+os.Getenv("ZONE_ID")+"/dns_records/"+record_id
	jsonPayload, _ := json.Marshal(payload)
	apiKey := os.Getenv("API_KEY")
	req, err := http.NewRequest("PUT", url, bytes.NewBuffer(jsonPayload))
	req.Header.Add("Authorization", "Bearer "+apiKey)
	req.Header.Add("Content-Type", "application/json")
	res, err := http.DefaultClient.Do(req)
	if err != nil {
	log.Print("something wrong while sending req " + err.Error())
	} else {
	res, _ := ioutil.ReadAll(res.Body)
	log.Println(string(res))
	}

}
